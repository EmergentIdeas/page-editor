<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2014-02-04 19:24"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Coding Fit</title>
<link>http://codingfit.wordpress.com</link>
<description>Thoughts about programming</description>
<pubDate>Tue, 04 Feb 2014 19:24:34 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://codingfit.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>dankolz</wp:author_login>
  <wp:author_email>dan@emergentideas.com</wp:author_email>
  <wp:author_display_name><![CDATA[Dan Kolz]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<wp:category>
  <wp:term_id>332</wp:term_id>
  <wp:category_nicename>coding</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[coding]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>28382</wp:term_id>
  <wp:category_nicename>system-admin</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[system admin]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>156721</wp:term_id>
  <wp:tag_slug>200</wp:tag_slug>
  <wp:tag_name><![CDATA[200]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>166260</wp:term_id>
  <wp:tag_slug>304</wp:tag_slug>
  <wp:tag_name><![CDATA[304]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1094345</wp:term_id>
  <wp:tag_slug>all-files</wp:tag_slug>
  <wp:tag_name><![CDATA[all files]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6602</wp:term_id>
  <wp:tag_slug>amazon</wp:tag_slug>
  <wp:tag_name><![CDATA[amazon]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4250998</wp:term_id>
  <wp:tag_slug>animat</wp:tag_slug>
  <wp:tag_name><![CDATA[animat]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1807</wp:term_id>
  <wp:tag_slug>animation</wp:tag_slug>
  <wp:tag_name><![CDATA[animation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3768</wp:term_id>
  <wp:tag_slug>apache</wp:tag_slug>
  <wp:tag_name><![CDATA[apache]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5561047</wp:term_id>
  <wp:tag_slug>avi-files</wp:tag_slug>
  <wp:tag_name><![CDATA[avi files]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>144203</wp:term_id>
  <wp:tag_slug>aws</wp:tag_slug>
  <wp:tag_name><![CDATA[aws]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5469</wp:term_id>
  <wp:tag_slug>backup</wp:tag_slug>
  <wp:tag_name><![CDATA[backup]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>33196</wp:term_id>
  <wp:tag_slug>best-practice</wp:tag_slug>
  <wp:tag_name><![CDATA[best practice]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>91</wp:term_id>
  <wp:tag_slug>blogging</wp:tag_slug>
  <wp:tag_name><![CDATA[blogging]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1400756</wp:term_id>
  <wp:tag_slug>cache-control</wp:tag_slug>
  <wp:tag_name><![CDATA[Cache-Control]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>140736151</wp:term_id>
  <wp:tag_slug>calendar-object</wp:tag_slug>
  <wp:tag_name><![CDATA[calendar object]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>367314</wp:term_id>
  <wp:tag_slug>chrome</wp:tag_slug>
  <wp:tag_name><![CDATA[chrome]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8607383</wp:term_id>
  <wp:tag_slug>client-questions</wp:tag_slug>
  <wp:tag_name><![CDATA[client questions]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7735</wp:term_id>
  <wp:tag_slug>clients</wp:tag_slug>
  <wp:tag_name><![CDATA[clients]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>88760145</wp:term_id>
  <wp:tag_slug>coding-environment</wp:tag_slug>
  <wp:tag_name><![CDATA[coding environment]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>16694323</wp:term_id>
  <wp:tag_slug>column-name</wp:tag_slug>
  <wp:tag_name><![CDATA[column name]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14292</wp:term_id>
  <wp:tag_slug>command</wp:tag_slug>
  <wp:tag_name><![CDATA[command]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>258</wp:term_id>
  <wp:tag_slug>computer</wp:tag_slug>
  <wp:tag_name><![CDATA[computer]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>194940900</wp:term_id>
  <wp:tag_slug>convert-double-to-date</wp:tag_slug>
  <wp:tag_name><![CDATA[convert double to date]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12243866</wp:term_id>
  <wp:tag_slug>crash-plan</wp:tag_slug>
  <wp:tag_name><![CDATA[crash plan]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>885545</wp:term_id>
  <wp:tag_slug>create-table</wp:tag_slug>
  <wp:tag_name><![CDATA[create table]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>169</wp:term_id>
  <wp:tag_slug>css</wp:tag_slug>
  <wp:tag_name><![CDATA[css]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>54013</wp:term_id>
  <wp:tag_slug>date</wp:tag_slug>
  <wp:tag_name><![CDATA[date]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>194940898</wp:term_id>
  <wp:tag_slug>date-as-double</wp:tag_slug>
  <wp:tag_name><![CDATA[date as double]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>55118</wp:term_id>
  <wp:tag_slug>directory</wp:tag_slug>
  <wp:tag_name><![CDATA[directory]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84905</wp:term_id>
  <wp:tag_slug>disk</wp:tag_slug>
  <wp:tag_name><![CDATA[disk]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>151472</wp:term_id>
  <wp:tag_slug>dojo</wp:tag_slug>
  <wp:tag_name><![CDATA[dojo]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>99979</wp:term_id>
  <wp:tag_slug>double</wp:tag_slug>
  <wp:tag_name><![CDATA[double]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>194940899</wp:term_id>
  <wp:tag_slug>double-as-date</wp:tag_slug>
  <wp:tag_name><![CDATA[double as date]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4230</wp:term_id>
  <wp:tag_slug>download</wp:tag_slug>
  <wp:tag_name><![CDATA[download]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>412792</wp:term_id>
  <wp:tag_slug>ebs</wp:tag_slug>
  <wp:tag_name><![CDATA[ebs]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>315451</wp:term_id>
  <wp:tag_slug>ec2</wp:tag_slug>
  <wp:tag_name><![CDATA[ec2]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>75079363</wp:term_id>
  <wp:tag_slug>editing-web-pages</wp:tag_slug>
  <wp:tag_name><![CDATA[editing web pages]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>137204</wp:term_id>
  <wp:tag_slug>entity</wp:tag_slug>
  <wp:tag_name><![CDATA[entity]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>43966</wp:term_id>
  <wp:tag_slug>ffmpeg</wp:tag_slug>
  <wp:tag_name><![CDATA[ffmpeg]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>162358</wp:term_id>
  <wp:tag_slug>file</wp:tag_slug>
  <wp:tag_name><![CDATA[file]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>231490</wp:term_id>
  <wp:tag_slug>file-system</wp:tag_slug>
  <wp:tag_name><![CDATA[file system]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>289227</wp:term_id>
  <wp:tag_slug>file-upload</wp:tag_slug>
  <wp:tag_name><![CDATA[file upload]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28955</wp:term_id>
  <wp:tag_slug>form</wp:tag_slug>
  <wp:tag_name><![CDATA[form]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>167215461</wp:term_id>
  <wp:tag_slug>free-vms</wp:tag_slug>
  <wp:tag_name><![CDATA[free vms]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1256</wp:term_id>
  <wp:tag_slug>gaming</wp:tag_slug>
  <wp:tag_name><![CDATA[gaming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>25718</wp:term_id>
  <wp:tag_slug>guardian</wp:tag_slug>
  <wp:tag_name><![CDATA[Guardian]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17907</wp:term_id>
  <wp:tag_slug>hibernate</wp:tag_slug>
  <wp:tag_name><![CDATA[hibernate]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14721496</wp:term_id>
  <wp:tag_slug>high-production-value</wp:tag_slug>
  <wp:tag_name><![CDATA[high production value]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20756413</wp:term_id>
  <wp:tag_slug>html-extension</wp:tag_slug>
  <wp:tag_name><![CDATA[html extension]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>686</wp:term_id>
  <wp:tag_slug>image</wp:tag_slug>
  <wp:tag_name><![CDATA[image]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1202778</wp:term_id>
  <wp:tag_slug>inconsistency</wp:tag_slug>
  <wp:tag_name><![CDATA[inconsistency]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22</wp:term_id>
  <wp:tag_slug>internet</wp:tag_slug>
  <wp:tag_name><![CDATA[internet]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1143</wp:term_id>
  <wp:tag_slug>internet-explorer</wp:tag_slug>
  <wp:tag_name><![CDATA[internet explorer]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>106595</wp:term_id>
  <wp:tag_slug>iphone</wp:tag_slug>
  <wp:tag_name><![CDATA[iPhone]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>68449</wp:term_id>
  <wp:tag_slug>ivy</wp:tag_slug>
  <wp:tag_name><![CDATA[ivy]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1017</wp:term_id>
  <wp:tag_slug>java</wp:tag_slug>
  <wp:tag_name><![CDATA[java]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>457</wp:term_id>
  <wp:tag_slug>javascript</wp:tag_slug>
  <wp:tag_name><![CDATA[javascript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>307053</wp:term_id>
  <wp:tag_slug>jpa</wp:tag_slug>
  <wp:tag_name><![CDATA[jpa]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21291</wp:term_id>
  <wp:tag_slug>js</wp:tag_slug>
  <wp:tag_name><![CDATA[js]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>102270</wp:term_id>
  <wp:tag_slug>junit</wp:tag_slug>
  <wp:tag_name><![CDATA[junit]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2829783</wp:term_id>
  <wp:tag_slug>keystore</wp:tag_slug>
  <wp:tag_name><![CDATA[keystore]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>933431</wp:term_id>
  <wp:tag_slug>keytool</wp:tag_slug>
  <wp:tag_name><![CDATA[keytool]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>180742</wp:term_id>
  <wp:tag_slug>keyword</wp:tag_slug>
  <wp:tag_name><![CDATA[keyword]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>610</wp:term_id>
  <wp:tag_slug>linux</wp:tag_slug>
  <wp:tag_name><![CDATA[linux]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>204448</wp:term_id>
  <wp:tag_slug>lob</wp:tag_slug>
  <wp:tag_name><![CDATA[lob]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21686</wp:term_id>
  <wp:tag_slug>medium</wp:tag_slug>
  <wp:tag_name><![CDATA[medium]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>53184</wp:term_id>
  <wp:tag_slug>micro</wp:tag_slug>
  <wp:tag_name><![CDATA[micro]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8593</wp:term_id>
  <wp:tag_slug>mirror</wp:tag_slug>
  <wp:tag_name><![CDATA[mirror]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32801</wp:term_id>
  <wp:tag_slug>mixed-media</wp:tag_slug>
  <wp:tag_name><![CDATA[mixed media]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>13414866</wp:term_id>
  <wp:tag_slug>mp4-files</wp:tag_slug>
  <wp:tag_name><![CDATA[mp4 files]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1905096</wp:term_id>
  <wp:tag_slug>multipart</wp:tag_slug>
  <wp:tag_name><![CDATA[multipart]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1569288</wp:term_id>
  <wp:tag_slug>multiple-files</wp:tag_slug>
  <wp:tag_name><![CDATA[multiple files]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19121828</wp:term_id>
  <wp:tag_slug>must-revalidate</wp:tag_slug>
  <wp:tag_name><![CDATA[must-revalidate]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>36699</wp:term_id>
  <wp:tag_slug>mvc</wp:tag_slug>
  <wp:tag_name><![CDATA[mvc]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4419</wp:term_id>
  <wp:tag_slug>mysql</wp:tag_slug>
  <wp:tag_name><![CDATA[mysql]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1182</wp:term_id>
  <wp:tag_slug>netflix</wp:tag_slug>
  <wp:tag_name><![CDATA[netflix]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>29197</wp:term_id>
  <wp:tag_slug>nsa</wp:tag_slug>
  <wp:tag_name><![CDATA[NSA]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>134536265</wp:term_id>
  <wp:tag_slug>onbeforeunload-event</wp:tag_slug>
  <wp:tag_name><![CDATA[onbeforeunload event]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1359391</wp:term_id>
  <wp:tag_slug>openssl</wp:tag_slug>
  <wp:tag_name><![CDATA[openssl]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4007960</wp:term_id>
  <wp:tag_slug>p12</wp:tag_slug>
  <wp:tag_name><![CDATA[p12]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2607</wp:term_id>
  <wp:tag_slug>pc</wp:tag_slug>
  <wp:tag_name><![CDATA[pc]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>992464</wp:term_id>
  <wp:tag_slug>pem</wp:tag_slug>
  <wp:tag_name><![CDATA[pem]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1930</wp:term_id>
  <wp:tag_slug>performance</wp:tag_slug>
  <wp:tag_name><![CDATA[performance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>310667</wp:term_id>
  <wp:tag_slug>permissions</wp:tag_slug>
  <wp:tag_name><![CDATA[permissions]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21268597</wp:term_id>
  <wp:tag_slug>pkcs12</wp:tag_slug>
  <wp:tag_name><![CDATA[pkcs12]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27822</wp:term_id>
  <wp:tag_slug>plan</wp:tag_slug>
  <wp:tag_name><![CDATA[plan]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>196</wp:term_id>
  <wp:tag_slug>programming</wp:tag_slug>
  <wp:tag_name><![CDATA[programming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>65336</wp:term_id>
  <wp:tag_slug>raid</wp:tag_slug>
  <wp:tag_name><![CDATA[raid]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2675</wp:term_id>
  <wp:tag_slug>refresh</wp:tag_slug>
  <wp:tag_name><![CDATA[refresh]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12606529</wp:term_id>
  <wp:tag_slug>refresh-button</wp:tag_slug>
  <wp:tag_name><![CDATA[refresh button]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>30886993</wp:term_id>
  <wp:tag_slug>relative-urls</wp:tag_slug>
  <wp:tag_name><![CDATA[relative urls]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>318578</wp:term_id>
  <wp:tag_slug>rename</wp:tag_slug>
  <wp:tag_name><![CDATA[rename]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2782505</wp:term_id>
  <wp:tag_slug>robots-txt</wp:tag_slug>
  <wp:tag_name><![CDATA[robots.txt]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>133339</wp:term_id>
  <wp:tag_slug>s3</wp:tag_slug>
  <wp:tag_name><![CDATA[s3]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28024328</wp:term_id>
  <wp:tag_slug>s3cmd</wp:tag_slug>
  <wp:tag_name><![CDATA[s3cmd]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>801</wp:term_id>
  <wp:tag_slug>security</wp:tag_slug>
  <wp:tag_name><![CDATA[security]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>37293</wp:term_id>
  <wp:tag_slug>sed</wp:tag_slug>
  <wp:tag_name><![CDATA[sed]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>492226</wp:term_id>
  <wp:tag_slug>shrink</wp:tag_slug>
  <wp:tag_name><![CDATA[shrink]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>73514</wp:term_id>
  <wp:tag_slug>small</wp:tag_slug>
  <wp:tag_name><![CDATA[small]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>581</wp:term_id>
  <wp:tag_slug>software</wp:tag_slug>
  <wp:tag_name><![CDATA[software]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9486</wp:term_id>
  <wp:tag_slug>spring</wp:tag_slug>
  <wp:tag_name><![CDATA[spring]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>465938</wp:term_id>
  <wp:tag_slug>spring-mvc</wp:tag_slug>
  <wp:tag_name><![CDATA[spring mvc]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10346</wp:term_id>
  <wp:tag_slug>sql</wp:tag_slug>
  <wp:tag_name><![CDATA[sql]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1054425</wp:term_id>
  <wp:tag_slug>sql-scripts</wp:tag_slug>
  <wp:tag_name><![CDATA[sql scripts]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>58302</wp:term_id>
  <wp:tag_slug>ssl</wp:tag_slug>
  <wp:tag_name><![CDATA[ssl]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6</wp:term_id>
  <wp:tag_slug>technology</wp:tag_slug>
  <wp:tag_name><![CDATA[technology]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>227010</wp:term_id>
  <wp:tag_slug>terminator</wp:tag_slug>
  <wp:tag_name><![CDATA[terminator]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8</wp:term_id>
  <wp:tag_slug>test</wp:tag_slug>
  <wp:tag_name><![CDATA[test]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>273023</wp:term_id>
  <wp:tag_slug>test-case</wp:tag_slug>
  <wp:tag_name><![CDATA[test case]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>34557255</wp:term_id>
  <wp:tag_slug>test-code</wp:tag_slug>
  <wp:tag_name><![CDATA[test code]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12</wp:term_id>
  <wp:tag_slug>testing</wp:tag_slug>
  <wp:tag_name><![CDATA[testing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5117</wp:term_id>
  <wp:tag_slug>text</wp:tag_slug>
  <wp:tag_name><![CDATA[text]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7585</wp:term_id>
  <wp:tag_slug>tomcat</wp:tag_slug>
  <wp:tag_name><![CDATA[tomcat]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>176028</wp:term_id>
  <wp:tag_slug>tree</wp:tag_slug>
  <wp:tag_name><![CDATA[tree]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9203</wp:term_id>
  <wp:tag_slug>unix</wp:tag_slug>
  <wp:tag_name><![CDATA[unix]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2908385</wp:term_id>
  <wp:tag_slug>version-number</wp:tag_slug>
  <wp:tag_name><![CDATA[version number]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>412</wp:term_id>
  <wp:tag_slug>video</wp:tag_slug>
  <wp:tag_name><![CDATA[video]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>134873</wp:term_id>
  <wp:tag_slug>web-page</wp:tag_slug>
  <wp:tag_name><![CDATA[web page]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22474</wp:term_id>
  <wp:tag_slug>web-software</wp:tag_slug>
  <wp:tag_name><![CDATA[web software]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>320736</wp:term_id>
  <wp:tag_slug>wget</wp:tag_slug>
  <wp:tag_name><![CDATA[wget]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>949651</wp:term_id>
  <wp:tag_slug>white-space</wp:tag_slug>
  <wp:tag_name><![CDATA[white space]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>83407904</wp:term_id>
  <wp:tag_slug>work-expense</wp:tag_slug>
  <wp:tag_name><![CDATA[work expense]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>391503</wp:term_id>
  <wp:tag_slug>xargs</wp:tag_slug>
  <wp:tag_name><![CDATA[xargs]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2057154</wp:term_id>
  <wp:tag_slug>xlarge</wp:tag_slug>
  <wp:tag_name><![CDATA[xlarge]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>184522</wp:term_id>
  <wp:tag_slug>yoda</wp:tag_slug>
  <wp:tag_name><![CDATA[yoda]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12516769</wp:term_id>
  <wp:tag_slug>yui-compressor</wp:tag_slug>
  <wp:tag_name><![CDATA[yui-compressor]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>Coding Fit</title>
		<link>http://codingfit.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>http://codingfit.wordpress.com/about/</link>
  <pubDate>Wed, 02 Jan 2013 15:45:07 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[This is an example of a page. Unlike posts, which are displayed on your blog’s front page in the order they’re published, pages are better suited for more timeless content that you want to be easily accessible, like your About or Contact information. Click the Edit link to make changes to this page or <a title="Direct link to Add New in the Admin Dashboard" href="/wp-admin/post-new.php?post_type=page">add another page</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2013-01-02 15:45:07</wp:post_date>
  <wp:post_date_gmt>2013-01-02 15:45:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title>Leaving the Page and Dojo 1.8</title>
  <link>http://codingfit.wordpress.com/2013/01/02/leaving-the-page-and-dojo-1-8/</link>
  <pubDate>Wed, 02 Jan 2013 17:06:49 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=2</guid>
  <description/>
  <content:encoded><![CDATA[I got a present from Dojo 1.8 this Christmas.  An app I work on now prompts me every time I want to leave the page.  I hate this.

It turns out it was not a feature added by us but something incidental in how we're using dojo now that we've upgraded to 1.8 that causes these prompts.  The registration of this prompt for the beforeunload/onbeforeunload event happens just by requiring the EnhancedGrid but probably happens in other ways as well.

Below is the code for how I fixed it.  I added this code after I had loaded dojo.js but before I called the required function that causes the registration of the handler. It refuses to register the function if the name is null and examines the return value and returns null if false.  Returning null convinces the browser not to show the dialog.
<blockquote>dojo._base.unload.addOnWindowUnload =
dojo.addOnWindowUnload = function(obj, functionName) { registerBeforeUnloadHandler("unload", obj, functionName); };

dojo._base.unload.addOnUnload =
dojo.addOnUnload = function(obj, functionName) { registerBeforeUnloadHandler("beforeunload", obj, functionName); };

function registerBeforeUnloadHandler(/*String*/ eventName, /*Object?|Function?*/ obj, /*String|Function?*/ functionName) {
if(!functionName) {
return;
}
var actualFunction = obj[functionName];
if(actualFunction) {
var hitchedFunction = dojo._base.lang.hitch(obj, functionName);
dojo.on(window, eventName, function() {
var val = hitchedFunction(arguments);
if(val == false) {
return null;
}
return val;
});
}
}</blockquote>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2013-01-02 17:06:49</wp:post_date>
  <wp:post_date_gmt>2013-01-02 17:06:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>leaving-the-page-and-dojo-1-8</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="dojo"><![CDATA[dojo]]></category>
  <category domain="post_tag" nicename="js"><![CDATA[js]]></category>
  <category domain="post_tag" nicename="onbeforeunload-event"><![CDATA[onbeforeunload event]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Too Animated!</title>
  <link>http://codingfit.wordpress.com/2013/01/06/too-animated/</link>
  <pubDate>Sun, 06 Jan 2013 21:59:54 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=13</guid>
  <description/>
  <content:encoded><![CDATA[<p>Animation in software has become increasingly common. The iPhone has done a lot to make it so, but would probably be a popular form of eye candy anyway. Those that I've talked to and observation of software seems to indicate that programmers are looking for places to use animations to make their applications more attractive.  </p><p>I was thinking about what the "good" uses of animation are because it seems there is no consensus:</p><p>1. To draw a user's attention to visual elements</p><p>This is actually less common than it should be.  It's a great way to show a user what's changing in a one-page app since they don't get signaled by a page change.  Interestingly, many programmers animate the "background" elements, which may be pretty, but I think is a mistake in terms of user interaction as it gets them to focus on something that conveys little information and draws the user away from the functional components.</p><p>2. To smooth a discontinuous user interaction</p><p>A popular usage of this is the fade-in menu which makes it look like the computer is responding to a request.  This mimics real life were almost everything, except falling down on roller blades, happens over some period of time, not instantly. This is different from #1 in that a user is expecting to see the menu and will be surprised if they don't. This technique helps keep a user tied to causal relationship between their click an the effect.</p><p>An anti-pattern for #1 and #2 is the way the Netflix app works on my Nexus 7. If I watch an episode of a TV show and go back to the main screen, it shows me previous shows, recommendations, categories like action, sci-fi, etc. It also changes the episode number and thumbnail in the previously watched to be the next episode in the series I just watched, which is good. It has an animation to show me that they're changing it and it's not the one I just watched, which is great!</p><p>However, they've got two different, unsynchronized animations to do it, one that cross-fades the thumbnail and one that runs the progress indicator bar back to zero minutes, zero seconds watched. This is bad.</p><p>It's not an unforgivable sin, it's just that they could do it better and have spent less time on it.  They could have cross faded the thumbnail and indicator that started out at zero into the location.  After all, the episode isn't really rewinding, so in the case that user gets anything from it, the animation is implying something untrue.</p><p>Although I don't know the folks who wrote this, I can envision the meeting where they came up with this idea, and it seems like it must have sounded like, "How can we pump in more eye candy to be cool", and less like, "Is there anything we can do to make the user experience better".</p><p>3. To enrich and enable an interaction metaphor</p><p>A great example of this is the avatar of an item a user is dragging from one place to another place showing up at the location of cursor as it moves across the screen.  It connects the user to the interaction and makes it feel more natural.  You can certainly have drag and drop without doing an animation for it, but it feels so weird.</p><p>4. To add eye candy to be cool</p><p>I know I was just decrying this attitude.  However, I know people who like some pretty gaudy shit. It may be impossible to build a popular app without crap flying around the screen. When it is used for this purpose though, programmers should find a way to convey information with it (since it will catch the user's attention) and it should be fast.  Blindingly fast. So fast it's on the edge of being subconscious fast.</p><p>Slow animations do two things for me (I may or may not be representative). First, they make me pissed off that I have to wait while some worthless, piss-ant, form of programmer ego stroking which isn't even novel is carried out before the app will execute my instruction. Second, it makes the app feel sloooow. Even if my computer wasn't state of the art, I want it to feel that way. Plus, anything which looks slow on a device with 8 cores and 16 gigs of memory is probably going to look like absolute dog shit on a phone or tablet.</p><p> </p><p>My conclusions for where I want to use animation for are:</p><p>1. Start with user experience to find where notification is needed or discontinuity needs to be smoothed. Subtle animations can make an app feel like a well constructed artifice.</p><p>2. Never let the animation become the star because it distracts from the more important parts of the app.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>2013-01-06 21:59:54</wp:post_date>
  <wp:post_date_gmt>2013-01-06 21:59:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>too-animated</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="animation"><![CDATA[animation]]></category>
  <category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
  <category domain="post_tag" nicename="netflix"><![CDATA[netflix]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="web-software"><![CDATA[web software]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"35157051";s:7:"blog_id";s:8:"44747174";s:9:"mod_stamp";s:19:"2013-01-06 21:59:54";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Like a Black Hole</title>
  <link>http://codingfit.wordpress.com/2013/01/08/like-a-black-hole/</link>
  <pubDate>Tue, 08 Jan 2013 14:24:33 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=92</guid>
  <description/>
  <content:encoded><![CDATA[I've got two cats, Olive and Squirt. Olive is jet black and in some lights looks like a hole in the floor. She is, as I just discovered, also a great absorber of sound.

My desk has speakers on either side of the monitor which are playing this morning as I work. Olive just walked in front of the one on left and I thought I'd gone deaf on that side. I tried it with a box that's handy and only got a diminished volume on that side.

So, pro tip, I guess: If you want a room to be really quite, fill it with black cats.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>92</wp:post_id>
  <wp:post_date>2013-01-08 14:24:33</wp:post_date>
  <wp:post_date_gmt>2013-01-08 14:24:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>like-a-black-hole</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="coding-environment"><![CDATA[coding environment]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Dates and Versions</title>
  <link>http://codingfit.wordpress.com/2013/01/22/dates-and-versions/</link>
  <pubDate>Tue, 22 Jan 2013 06:05:18 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=105</guid>
  <description/>
  <content:encoded><![CDATA[I'm reading Apache <a href="http://ant.apache.org/ivy/">Ivy</a>'s documentation trying to work through a problem with their version expressions.  I really like Ivy's functionality, but sometimes it confuses me still.  I need their documentation.

One thing that occurred to me was that they (and me and everyone else) should list a release date with their version numbers, at least for the first time a version number is used.  Use the convention for the use of an acronym.  Their documentations about a feature says, "available since 1.4" which requires me to look up when 1.4 was released or find the current version I have installed.  It would be much nicer if it said, "available since 1.4 (June 2006)".  This would have told me at a glance that a back version probably isn't the problem on my Ubuntu 12.04 box.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>105</wp:post_id>
  <wp:post_date>2013-01-22 06:05:18</wp:post_date>
  <wp:post_date_gmt>2013-01-22 06:05:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dates-and-versions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
  <category domain="post_tag" nicename="best-practice"><![CDATA[best practice]]></category>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="ivy"><![CDATA[ivy]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="version-number"><![CDATA[version number]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using GitHub as a "Public" Ivy Repository</title>
  <link>http://codingfit.wordpress.com/?p=108</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=108</guid>
  <description/>
  <content:encoded><![CDATA[I've got a number of toolkit projects that I want to build and publish so I can use them as an ivy dependency for other projects.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>108</wp:post_id>
  <wp:post_date>2013-01-25 14:33:50</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Vicodin for my IE Interactions</title>
  <link>http://codingfit.wordpress.com/2013/05/07/vicodin-for-my-ie-interactions/</link>
  <pubDate>Tue, 07 May 2013 20:59:22 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=110</guid>
  <description/>
  <content:encoded><![CDATA[You say, "Microsoft Internet Explorer."

I say, "I hate Internet Explorer!"

I found this to be a really common reaction. I saw something which changed my reaction to, "Well, I guess so."

Microsoft started <a href="http://www.modern.ie/">http://www.modern.ie</a> which has free VMs to test different versions of IE on different platforms. For me, this makes everything so much less painful.

The site even shows how to download the VMs using standard tools like wget. It's strange, but even so small a thing makes me think much better of Microsoft.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>110</wp:post_id>
  <wp:post_date>2013-05-07 20:59:22</wp:post_date>
  <wp:post_date_gmt>2013-05-07 20:59:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vicodin-for-my-ie-interactions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="free-vms"><![CDATA[free vms]]></category>
  <category domain="post_tag" nicename="internet"><![CDATA[internet]]></category>
  <category domain="post_tag" nicename="internet-explorer"><![CDATA[internet explorer]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Spring JPA JUnit Test with Transactions</title>
  <link>http://codingfit.wordpress.com/2013/02/15/spring-jpa-junit-test-with-transactions/</link>
  <pubDate>Fri, 15 Feb 2013 22:43:19 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=112</guid>
  <description/>
  <content:encoded><![CDATA[I'm using Spring with JPA and want to test my services with JUnit. This mostly works with a modified version of my application configuration.

However, I'm trying to test a problem with a constraint that shows up in the application. When I JUnit test, nothing is getting written to the DB, so it's difficult for me to tell what JPA is doing and how to correct it.  Not only that, it looks like the transaction boundaries are different, so I'm skeptical about the validity of my tests.

I've tried a bunch of things I found dealing with the transactional attribute, none of which have worked.  Here is what worked for me today, even though I'm sure it's kind of a hack.

First, I write a test runner like this:

<code>
public class TestRunner extends SpringJUnit4ClassRunner {</code>

@PersistenceUnit(name = "replace with a persistence unit name")
protected EntityManagerFactory factory;

@PersistenceContext
protected EntityManager entityManager;

public TestRunner(Class&lt;?&gt; clazz) throws InitializationError {
super(clazz);
}

@Override
protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {
try {
getTestContextManager().prepareTestInstance(this);
} catch(Exception e) {
e.printStackTrace();
}

if(!TransactionSynchronizationManager.isSynchronizationActive()) {
TransactionSynchronizationManager.initSynchronization();
}

EntityManager inner = ((EntityManagerProxy)entityManager).getTargetEntityManager();
inner.getTransaction().begin();

super.runChild(frameworkMethod, notifier);

inner.getTransaction().commit();
}
}

I then need to modify my test case to use this test case runner:

<code>
@RunWith(TestRunner.class)
@ContextConfiguration(locations = "/my/configuration/file/location.xml")
public class ServerServiceTest {
@PersistenceContext
protected EntityManager entityManager;
@Test
public void testDelete() {
// my test code here</code>

// also, here's how to get the real entity manager in case you want to do
// flushes and commits
EntityManager inner = ((EntityManagerProxy)entityManager).getTargetEntityManager();
}
}

I've got my configuration pointed to a mysql database and I can now see the results of the database transaction. Btw, if you know a better way, please, please write me a comment about it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>112</wp:post_id>
  <wp:post_date>2013-02-15 22:43:19</wp:post_date>
  <wp:post_date_gmt>2013-02-15 22:43:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spring-jpa-junit-test-with-transactions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="jpa"><![CDATA[jpa]]></category>
  <category domain="post_tag" nicename="junit"><![CDATA[junit]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="spring"><![CDATA[spring]]></category>
  <category domain="post_tag" nicename="test"><![CDATA[test]]></category>
  <category domain="post_tag" nicename="test-case"><![CDATA[test case]]></category>
  <category domain="post_tag" nicename="test-code"><![CDATA[test code]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Elements of Backup</title>
  <link>http://codingfit.wordpress.com/2013/03/05/the-elements-of-backup/</link>
  <pubDate>Tue, 05 Mar 2013 14:02:17 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=116</guid>
  <description/>
  <content:encoded><![CDATA[Somebody asked me today if there was a good program to back up their PC. The are, of course, many good programs, including the one I recommended, <a href="http://www.crashplan.com/">Crash Plan</a>. However, almost as important as doing anything is planning to do the right thing. Below is the set of things that I thought were the essential elements of a backup strategy for a single piece of hardware.

Any backup is better than no backup.  The best backups are planned by:
<ol>
	<li>Identifying all the ways that the system is used in the organization and the impacts it will have if it fails. This will leave you in a better position when it does fail and tell you how much work/expense you should go to to back it up.</li>
	<li>Identifying all of the data on the system that needs to be saved</li>
	<li>Putting an automated system in place to back it up (crash plan or something like it)</li>
	<li>Identifying all of the software you use on the system (do not try to back it up). This does not include things like "Minesweeper" which you might happen to play put don't actually need on a replacement system.</li>
	<li>Finding and keeping the original install disks or restore disks with license keys in a safe place.</li>
	<li>Identifying the minimum hardware needed to be a replacement. For example, will any laptop do, are does it need special hardware like GPS, a card reader, or a big screen.</li>
	<li>Periodically testing to be sure you can restore the applications and data. Write down any configurations steps (like restoring mapped drives) that you need to restore the system.</li>
</ol>
Ideally, for each machine I back up, I'd take an hour and write all this out in a document and print it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>116</wp:post_id>
  <wp:post_date>2013-03-05 14:02:17</wp:post_date>
  <wp:post_date_gmt>2013-03-05 14:02:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-elements-of-backup</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="backup"><![CDATA[backup]]></category>
  <category domain="post_tag" nicename="computer"><![CDATA[computer]]></category>
  <category domain="post_tag" nicename="crash-plan"><![CDATA[crash plan]]></category>
  <category domain="post_tag" nicename="gaming"><![CDATA[gaming]]></category>
  <category domain="post_tag" nicename="pc"><![CDATA[pc]]></category>
  <category domain="post_tag" nicename="plan"><![CDATA[plan]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="technology"><![CDATA[technology]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="work-expense"><![CDATA[work expense]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>s3cmd and amazon s3 permissions</title>
  <link>http://codingfit.wordpress.com/2013/03/13/s3cmd-and-amazon-s3-permissions/</link>
  <pubDate>Wed, 13 Mar 2013 21:38:29 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=118</guid>
  <description/>
  <content:encoded><![CDATA[The test to be sure it works is easiest.  "Hey, I copied a file to s3 using s3cmd. Now let's try it with something other than my account super user." Now the trouble. Neither get or put work by just granting all permissions.

The amazon permissions required for a user or group weren't obvious to me.  There seems to be 2 keys:
<ol>
	<li>Give the user the permission to list buckets</li>
	<li>Give the user permission to get and put objects, even though you may have granted them all permissions (s3:*).  This site has a rather nice <a href="http://blog.tcs.de/s3cmd-set-iam-permissions/">write up</a>.</li>
</ol>
As a counter point, here's the permissions which worked for me set as policy in a group my user belongs to.
<pre><code>
{
  "Statement": [
	{
      "Action": [
        "s3:ListAllMyBuckets"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:s3:::*"
    },
    {
      "Action": [
        "s3:*",
		"s3:PutObject",
		"s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::mybucket",
	"arn:aws:s3:::mybucket/*"
      ]
    }
  ]
}
</code></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>118</wp:post_id>
  <wp:post_date>2013-03-13 21:38:29</wp:post_date>
  <wp:post_date_gmt>2013-03-13 21:38:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>s3cmd-and-amazon-s3-permissions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="amazon"><![CDATA[amazon]]></category>
  <category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
  <category domain="post_tag" nicename="permissions"><![CDATA[permissions]]></category>
  <category domain="post_tag" nicename="s3"><![CDATA[s3]]></category>
  <category domain="post_tag" nicename="s3cmd"><![CDATA[s3cmd]]></category>
  <category domain="post_tag" nicename="security"><![CDATA[security]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"35157051";s:7:"blog_id";s:8:"44747174";s:9:"mod_stamp";s:19:"2013-03-13 21:40:21";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Shoving PEMs into a Java Key Store for Tomcat</title>
  <link>http://codingfit.wordpress.com/2013/05/07/shoving-pems-into-a-java-key-store-for-tomcat/</link>
  <pubDate>Tue, 07 May 2013 21:34:27 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=124</guid>
  <description/>
  <content:encoded><![CDATA[What I wanted to do was get a pre-existing public/private key pair into a java key store so that Tomcat could use it. Holy shit was that so much harder than I thought it would be. Here are a set of instructions that work (including generating the key and self signed certificate so you can test the instructions). I should add that there are a number of reliable instructions online that show how to get tomcat ssl to work if you use keytool to generate the RSA keys, but that wasn't my particular use case.

The trick to this is that the keytool will only import a new key pair into the key store if it is combined with a certificate (although it will import certificates all by themselves). When done, you'll be able to run the keytool and get output like that shown below. The most important part is the part that says PrivateKeyEntry. This means that the actual key got imported. If it just says trustedCertEntry, that means only the cert made it in and there's not enough information for tomcat to use for SSL. When you do the listing on a production key store there will be lots of cert entries (which is fine) but there must be at least one key entry.
<p style="padding-left:30px;">&gt;keytool -keystore keys.keystore -list</p>
<p style="padding-left:30px;">tomcat, May 6, 2013, PrivateKeyEntry,
Certificate fingerprint (SHA1): FC:5E:E8:92:8B:94:D3:64:68:2B:43:A0:60:F4:43:66:31:BC:85:CE</p>
The steps below generate the key, generate a self signed certificate, combine the certificate and key into a pkcs12 keystore, import the pkcs12 keystore into a jks formatted key store.
<p style="padding-left:30px;">Generate a key
openssl genrsa -out private.pem 1024</p>
<p style="padding-left:30px;">Generate a self signed cert
openssl req -new -x509 -key private.pem -out cert.pem</p>
<p style="padding-left:30px;">Create a pkcs12 keystore
openssl pkcs12 -export -in cert.pem -inkey private.pem &gt; keys.p12</p>
<p style="padding-left:30px;">Import a pkcs12 keystore into a java keystore
keytool -importkeystore -srckeystore keys.p12 -srcstoretype PKCS12 -destkeystore keys.keystore</p>
<p style="padding-left:30px;">Rename the key for tomcat
keytool -changealias -alias 1 -destalias tomcat -keystore keys.keystore</p>
There will be a number of prompts along the way for passwords and owner information which don't really matter as long as you keep typing the same password.

For real production keys you may also need to import the signer's certificates into the key store. There are a billion examples for how to do this that look generally like:
<p style="padding-left:30px;">keytool -import -alias root -file root.crt -keystore keys.keystore</p>
For completeness, here's what the goes in tomcat's server.xml that enables ssl:

&lt;Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
maxThreads="150" scheme="https" secure="true"
clientAuth="false" sslProtocol="TLS" keystoreFile="/tmp/keys.keystore"
keystorePass="password" /&gt;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>124</wp:post_id>
  <wp:post_date>2013-05-07 21:34:27</wp:post_date>
  <wp:post_date_gmt>2013-05-07 21:34:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>shoving-pems-into-a-java-key-store-for-tomcat</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="internet-explorer"><![CDATA[internet explorer]]></category>
  <category domain="post_tag" nicename="keystore"><![CDATA[keystore]]></category>
  <category domain="post_tag" nicename="keytool"><![CDATA[keytool]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
  <category domain="post_tag" nicename="openssl"><![CDATA[openssl]]></category>
  <category domain="post_tag" nicename="p12"><![CDATA[p12]]></category>
  <category domain="post_tag" nicename="pem"><![CDATA[pem]]></category>
  <category domain="post_tag" nicename="pkcs12"><![CDATA[pkcs12]]></category>
  <category domain="post_tag" nicename="security"><![CDATA[security]]></category>
  <category domain="post_tag" nicename="ssl"><![CDATA[ssl]]></category>
  <category domain="post_tag" nicename="tomcat"><![CDATA[tomcat]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"35157051";s:7:"blog_id";s:8:"44747174";s:9:"mod_stamp";s:19:"2013-05-07 21:34:27";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What's Wrong with Spring</title>
  <link>http://codingfit.wordpress.com/2013/05/13/whats-wrong-with-spring/</link>
  <pubDate>Mon, 13 May 2013 17:32:42 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=142</guid>
  <description/>
  <content:encoded><![CDATA[Spring and Spring MVC make me insane in an Alice in Wonderland meets Alice Cooper sort of way (see, that makes no sense).

For example, why isn't Spring MVC automatically configured to accept file uploads? Probably half of all projects or better will want to take an uploaded file.  There's no mystery about how this should be done, Spring publishes a <a href="http://static.springsource.org/spring/docs/3.0.0.RELEASE/reference/html/mvc.html#mvc-multipart">tutorial</a>. There's also a nice write-up <a href="http://www.ioncannon.net/programming/975/">here</a>.

The source of my insanity are decision like that to make the programmers look up and try to configure their environment to accept multi-part uploads. What is Spring protecting me from by making be do it myself? I'm barely able to get it to work with their example. Are they expecting me to dig deep into the bowels of Spring, learn everything that must be done, write my own code to demonstrate my knowledge, then decide to use theirs anyway since it's better tested.

I'm obviously going to use their example as is. The code and setup is complicated enough that nobody will start off rolling their own. Since I'm not going to start out making educated choices about my multi-part resolver plugin, why are they making me configure it? Any security, configuration, or performance problems that using their multi-part resolver entail will definitely exist in my application anyway.

There seems a clear right way to do this: make the multi-part resolver a plugin (as it is) and automatically use the default one (which they don't).

Might I want to set some properties or options? Sure. A way to tweak the default plugin for temp location and max upload size might be really useful. Might I want to choose among several plugins for my needs? Absolutely. That shouldn't be harder than specifying a different class. When I get to the bottom of my rabbit hole, might I want to write my own? Probably not ever, but since it's a plugin, I can.

I can't see how I'm hurt in any way by having it work out of the box.

An additional element of my insanity comes from the question, "What is the possible reason why they wouldn't just correctly handle multi-part POSTs?" Spring's whole value is that it marshals parameters and routes requests for me. Why won't I want it just to marshal these parameters? I suppose there's a slightly larger attack surface because there's more code loaded to exploit. However, based on all the crap they feel is needed already, I have a hard time believing they're too concerned about that.

Somebody, please, help me!

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>142</wp:post_id>
  <wp:post_date>2013-05-13 17:32:42</wp:post_date>
  <wp:post_date_gmt>2013-05-13 17:32:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>whats-wrong-with-spring</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="file-upload"><![CDATA[file upload]]></category>
  <category domain="post_tag" nicename="form"><![CDATA[form]]></category>
  <category domain="post_tag" nicename="java"><![CDATA[java]]></category>
  <category domain="post_tag" nicename="multipart"><![CDATA[multipart]]></category>
  <category domain="post_tag" nicename="mvc"><![CDATA[mvc]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="spring"><![CDATA[spring]]></category>
  <category domain="post_tag" nicename="spring-mvc"><![CDATA[spring mvc]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"35157051";s:7:"blog_id";s:8:"44747174";s:9:"mod_stamp";s:19:"2013-05-13 17:32:42";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Sed and the Plus Sign</title>
  <link>http://codingfit.wordpress.com/2013/07/10/sed-and-the-plus-sign/</link>
  <pubDate>Wed, 10 Jul 2013 15:08:35 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=145</guid>
  <description/>
  <content:encoded><![CDATA[Classic Unix rocks. Simple tools used intelligently to generate powerful programs.

I am by no means a Unix/Linux master and there are often even well-used corners that I explore only when I need a new ability. However, I hold for even unexplored areas an expectation of reverence. Lately I've been using SED to change the paths in some files that I'm copying from one machine to another.

Sadly, today my hopes are dashed. I've found an inconsistency! The SED operators perform differently.

Let's run this from the command line. It replaces the letter 'b' followed by zero or more numbers with the letter 'f' from a string passed in.
<p style="padding-left:30px;">&gt; echo 'ab1234cd' | sed 's/b[01234567890]*/f/'</p>
<p style="padding-left:30px;">afcd</p>
Awesome. Now let's run this. It should be the same thing except that it insists that 'b' must be followed by at least one number.
<p style="padding-left:30px;">&gt; echo 'ab1234cd' | sed 's/b[01234567890]+/f/'</p>
<p style="padding-left:30px;">ab1234cd</p>
Crap.

SED has an inconsistent way (to my mind) of escaping the operators. The plus sign is treated by default as literal character. There are two ways to fix this. The first is to use the '-r' flag. The second is to manually escape the plus sign like:
<p style="padding-left:30px;">&gt; echo 'ab1234cd' | sed 's/b[01234567890]\+/f/'</p>
<p style="padding-left:30px;">afcd</p>
Ahhh.  Back in tune with Unix again.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>145</wp:post_id>
  <wp:post_date>2013-07-10 15:08:35</wp:post_date>
  <wp:post_date_gmt>2013-07-10 15:08:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sed-and-the-plus-sign</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="inconsistency"><![CDATA[inconsistency]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
  <category domain="post_tag" nicename="sed"><![CDATA[sed]]></category>
  <category domain="post_tag" nicename="unix"><![CDATA[unix]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>JPA Reserved Member Names</title>
  <link>http://codingfit.wordpress.com/2013/07/25/jpa-reserved-member-names/</link>
  <pubDate>Thu, 25 Jul 2013 17:52:04 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=147</guid>
  <description/>
  <content:encoded><![CDATA[I like the JPA/Hibernate annotation mechanism. I like that it will create and update tables for me.

What I don't like is that JPA can be tough to configure. What I don't like is that JPA may not give me error messages when it doesn't create a table for an entity. Take the following member declaration in an entity class:

@Lob
protected byte[] sql;

In the above, it was my intent to store some sql scripts in the database. My hibernate JPA implementation on MySQL just doesn't create the table for the entity. It also doesn't give be a big fat error message like I'd expect. Why JPA, why?

In retrospect, it seems obvious. "sql" is not an allowable column name in mysql. Neither is order, table, as, from, or any of the other sql keywords.

As Yoda once said, "If your table will not create, your use of keywords investigate."]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>147</wp:post_id>
  <wp:post_date>2013-07-25 17:52:04</wp:post_date>
  <wp:post_date_gmt>2013-07-25 17:52:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>jpa-reserved-member-names</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="column-name"><![CDATA[column name]]></category>
  <category domain="post_tag" nicename="create-table"><![CDATA[create table]]></category>
  <category domain="post_tag" nicename="entity"><![CDATA[entity]]></category>
  <category domain="post_tag" nicename="hibernate"><![CDATA[hibernate]]></category>
  <category domain="post_tag" nicename="jpa"><![CDATA[jpa]]></category>
  <category domain="post_tag" nicename="keyword"><![CDATA[keyword]]></category>
  <category domain="post_tag" nicename="lob"><![CDATA[lob]]></category>
  <category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
  <category domain="post_tag" nicename="sql-scripts"><![CDATA[sql scripts]]></category>
  <category domain="post_tag" nicename="yoda"><![CDATA[yoda]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Robots Off</title>
  <link>http://codingfit.wordpress.com/2013/08/20/robots-off/</link>
  <pubDate>Tue, 20 Aug 2013 19:32:43 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=149</guid>
  <description/>
  <content:encoded><![CDATA[Insidious and seeking to destroy all human life, robots come in many models: the speech impaired T-800 (Model 101), the nearly indestructible T-1000, and the T-X Termanatrix. To stop them we must...

But first, let's consider something easier.

I use wget to clone sites for either backup or transfer to another server. Ideally, I'd be able to download the files from the server, but alas, sometimes this isn't practical.

Wget screws me almost every time. It doesn't convert the server qualified references to locally qualified references, it doesn't always download css and javascript, and sometimes there's a ton of stuff, including html, that it doesn't grab at all. For a tool with a command line switch called --mirror, this is some poor performance.

The set of command switches I've found to give the best performance are:

wget --mirror -p --convert-links -e robots=off www.mydomain.com

Mirror makes the download recursive and keeps timestamps. -p will download page requisites like css, js, and images. --convert-links should trigger post processing to convert all server qualified URLs into relative URLs but it doesn't work reliably for me.

-e robots=off is the key. It causes wget to ignore whats in the mydomain.com/robots.txt file. By default, wget will respect the contents of the robots.txt file when it says "don't download content from this directory". The robots file exists for a good reason, to keep search engines from needless downloading and indexing a bunch of scripts that nobody wants to search over. Wget missuses it.

It strikes me as insane that when passed the flag --mirror and told you want page requisites and can tell that the file is most probably a static resource (it ends in html, css, or js) that wget doesn't assume you actually want everything that would let you <a href="http://en.wikipedia.org/wiki/Mirror_(computing)">mirror</a> the site. But such is life.

Robots off and download on.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>149</wp:post_id>
  <wp:post_date>2013-08-20 19:32:43</wp:post_date>
  <wp:post_date_gmt>2013-08-20 19:32:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>robots-off</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="download"><![CDATA[download]]></category>
  <category domain="post_tag" nicename="mirror"><![CDATA[mirror]]></category>
  <category domain="post_tag" nicename="robots-txt"><![CDATA[robots.txt]]></category>
  <category domain="post_tag" nicename="terminator"><![CDATA[terminator]]></category>
  <category domain="post_tag" nicename="wget"><![CDATA[wget]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"35157051";s:7:"blog_id";s:8:"44747174";s:9:"mod_stamp";s:19:"2013-08-20 19:33:37";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Shrinking Javascript and CSS on Linux</title>
  <link>http://codingfit.wordpress.com/2013/08/21/shrinking-javascript-and-css-on-linux/</link>
  <pubDate>Wed, 21 Aug 2013 17:47:10 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=152</guid>
  <description/>
  <content:encoded><![CDATA[Small is beautiful. Shrinking Javascript and CSS by taking out the white space results in a substantial improvement in size and download speed without increasing the power needed to run it. For years I've used the dojo build which did it for me but since I've left the dojo world, I have to do it differently.

There are lots of ways to shrink files, but this is a testimonial for yui-compressor. On my Ubuntu distro it's one of the packages known to the package manager. Install and you're ready to go. From the command line:

yui-compressor myfile.js &gt; myfile.min.js

If only my waistline was so easy to shrink.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>152</wp:post_id>
  <wp:post_date>2013-08-21 17:47:10</wp:post_date>
  <wp:post_date_gmt>2013-08-21 17:47:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>shrinking-javascript-and-css-on-linux</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="css"><![CDATA[css]]></category>
  <category domain="post_tag" nicename="dojo"><![CDATA[dojo]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
  <category domain="post_tag" nicename="shrink"><![CDATA[shrink]]></category>
  <category domain="post_tag" nicename="white-space"><![CDATA[white space]]></category>
  <category domain="post_tag" nicename="yui-compressor"><![CDATA[yui-compressor]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>20</wp:comment_id>
    <wp:comment_author><![CDATA[SutoCom]]></wp:comment_author>
    <wp:comment_author_email>dennes777@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.sutocom.net</wp:comment_author_url>
    <wp:comment_author_IP>24.61.190.11</wp:comment_author_IP>
    <wp:comment_date>2013-08-23 10:45:19</wp:comment_date>
    <wp:comment_date_gmt>2013-08-23 10:45:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogged this on <a href="http://sutocom.net/2013/08/23/shrinking-javascript-and-css-on-linux/" rel="nofollow">Sutoprise Avenue, A SutoCom Source</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>9083961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1377254719.8042891025543212890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"sutocom";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1377262420</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1377262420.45357799530029296875;s:7:"message";s:46:"dankolz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"dankolz";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Running a Command For Multiple Files</title>
  <link>http://codingfit.wordpress.com/2013/09/03/running-a-command-for-multiple-files/</link>
  <pubDate>Tue, 03 Sep 2013 22:58:37 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=154</guid>
  <description/>
  <content:encoded><![CDATA[There are lots of cases where I want to run a single command for multiple files but don't want to manually type and execute the command a bunch of times. Two examples that I've encountered in the last week:  using convert to resize images and using ffmpeg to transcode serveral videos. I was thinking about writing a program to do it, but that's not the Unix way. The Unix way is to chain together a bunch of existing programs so that I have single bash command which is hard to remember and looks like a cat threw up on a keyboard.

In the Unix spirit, I publish here my command to transcode all the avi files in the current directory into mp4 files. Of course, this command can be modified for other purposes.
<p style="padding-left:30px;">ls *.avi | sed 's/\(.*\)\..*/\1/' | xargs -n 1 -I file ffmpeg -i file.avi file.mp4</p>
It's so simple, I'm sure you don't need an explanation, but just in case ...
<p style="padding-left:30px;">ls *.avi</p>
This selects all the files that should be transcoded.
<p style="padding-left:30px;">sed 's/\(.*\)\..*/\1/'</p>
This chops the extension and period from the end of each file name.
<p style="padding-left:30px;">xargs -n 1 -I file</p>
Takes each of the inputs and runs the command for each one. "-n 1" tells xargs to run the command for each input argument. Without this it would try to run one command with all of the inputs. "-I file" tells xargs to substitute the argument for each instance of the string "file" it finds in the command to run. As long as you're consistent, you could use any string like "myfiletoconvert" as a substitution variable.
<p style="padding-left:30px;">ffmpeg -i file.avi file.mp4</p>
Transcodes the input file (file.avi) into the output file (file.mp4). In this part of the command "file" is going to get replaced by xargs to be the input argument. Notice that I'm adding the extensions in this part of the command because I stripped it off earlier. Although I'm just changing the extension, you can see how you could add an arbitrary addition to the name like "_thumbnail" or something if you're running convert to resize an image. Notice also that there is no pipe between the xarg parameters and the ffmpeg command and parameters since the ffmpeg command and parameters are actually parameters to the xargs command.

So, if my directory contained the files, one.avi, two.avi, and three.avi, the command above would be the equivalent of issuing the following three commands:

ffmpeg -i one.avi one.mp4

ffmpeg -i two.avi two.mp4

ffmpeg -i three.avi three.mp4]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>154</wp:post_id>
  <wp:post_date>2013-09-03 22:58:37</wp:post_date>
  <wp:post_date_gmt>2013-09-03 22:58:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>running-a-command-for-multiple-files</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="avi-files"><![CDATA[avi files]]></category>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="command"><![CDATA[command]]></category>
  <category domain="post_tag" nicename="ffmpeg"><![CDATA[ffmpeg]]></category>
  <category domain="post_tag" nicename="file"><![CDATA[file]]></category>
  <category domain="post_tag" nicename="mp4-files"><![CDATA[mp4 files]]></category>
  <category domain="post_tag" nicename="multiple-files"><![CDATA[multiple files]]></category>
  <category domain="post_tag" nicename="sed"><![CDATA[sed]]></category>
  <category domain="post_tag" nicename="xargs"><![CDATA[xargs]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Can I Change My Web Pages?</title>
  <link>http://codingfit.wordpress.com/2013/09/10/can-i-change-my-web-pages/</link>
  <pubDate>Tue, 10 Sep 2013 21:45:26 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=157</guid>
  <description/>
  <content:encoded><![CDATA["Can I change my web pages?"

I get this question a lot from clients. Usually, I've set up a site that has some static and some dynamic content / application, and they'd like to be able to make modifications to their informational content (a totally fair request).

This is actually a  tough question to answer. In all of my setups they have the access but they personally may not have the ability (getting the page to look perfect can take some knowledge and experience). Since, "I don't know, are you good at editing HTML?" is not really what a client wants to hear, I've tried over the years to encapsulate the answer, "Yes. Probably not. Maybe.", in a form which is not ridiculously verbose but doesn't mislead them.

Below is my response to the last client who asked me this question. Since this is something like draft 10, I think I'm going to stick with it almost verbatim in the future. I include it here for the benefit of anyone else who gets this question and wants to hear how someone else answers it.
<p style="padding-left:30px;">It will be fairly easy for you to edit the copy (the text itself). It will be possible but will probably not be all that easy to edit the photos and have them look good (especially those in one of the slide shows).</p>
<p style="padding-left:30px;">Layout of photos on the web usually takes moderate HTML and CSS skills to make them look good. WYSIWYG editors (which you'll have) allow changes, but they usually look "just okay" to bad. You'll definitely have the access to edit the pages and images, but most of my clients find it easier and cheaper with better outcomes to ask somebody like me or a graphic designer to do 5 minutes of work to resize, reset quality, change out the images, and tweak the HTML or CSS as needed.</p>
<p style="padding-left:30px;">Please forgive me if I'm underestimating your HTML and CSS skills!</p>
<p style="padding-left:30px;">Doing anything to a web page which changes the layout (which changing an image often does) is a little like changing the oil in your car. How easy it is to do depends a lot more about your chops as a mechanic than it does on the car.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>157</wp:post_id>
  <wp:post_date>2013-09-10 21:45:26</wp:post_date>
  <wp:post_date_gmt>2013-09-10 21:45:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>can-i-change-my-web-pages</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="client-questions"><![CDATA[client questions]]></category>
  <category domain="post_tag" nicename="clients"><![CDATA[clients]]></category>
  <category domain="post_tag" nicename="editing-web-pages"><![CDATA[editing web pages]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="web-page"><![CDATA[web page]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Chrome's Refresh Button 304, F the Cache</title>
  <link>http://codingfit.wordpress.com/2013/09/18/chromes-refresh-button-304-f-the-cache/</link>
  <pubDate>Wed, 18 Sep 2013 19:37:35 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=161</guid>
  <description/>
  <content:encoded><![CDATA[Caching ... makes a website load like a squirrel on caffeine laced crack.

Of course, you need to get the headers right to make sure what you want the browser to reuse gets cached and the dynamic content doesn't. My static content included "must-revalidate" as part of the Cache-Control header which the spec says causes the browser to strictly follow the expiration rules without taking, what the spec calls, "liberties".

The problem was, when I was testing my page in chrome and pressing the reload button, the developer tools showed me that Chrome was submitting requests for images that should have been cached, resulting in a 304 response. (304 indicates that the copy the cache has is still good.) However, given my expiration times, Chrome shouldn't have been checking on the freshness of those images at all. I suspected "must-revalidate", but how wrong I was.

It turns out Chrome has a different behavior when the refresh button is pressed. Instead of using the cache in the usual way it chooses to try to revalidate all of the page's content. However, when I click links, I get the expected behavior of the browser pulling content from the cache without a check on the server.

So, I think this goes to show, despite how well webkit and firefox browsers adhere to the standard, I shouldn't assume that they don't have idiosyncratic behavior that, while within the standard, aren't occasionally context specific and (perhaps) unexpected.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>161</wp:post_id>
  <wp:post_date>2013-09-18 19:37:35</wp:post_date>
  <wp:post_date_gmt>2013-09-18 19:37:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>chromes-refresh-button-304-f-the-cache</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="200"><![CDATA[200]]></category>
  <category domain="post_tag" nicename="304"><![CDATA[304]]></category>
  <category domain="post_tag" nicename="cache-control"><![CDATA[Cache-Control]]></category>
  <category domain="post_tag" nicename="chrome"><![CDATA[chrome]]></category>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="must-revalidate"><![CDATA[must-revalidate]]></category>
  <category domain="post_tag" nicename="refresh"><![CDATA[refresh]]></category>
  <category domain="post_tag" nicename="refresh-button"><![CDATA[refresh button]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Double as Date</title>
  <link>http://codingfit.wordpress.com/2013/09/22/double-as-date/</link>
  <pubDate>Sun, 22 Sep 2013 17:35:47 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=163</guid>
  <description/>
  <content:encoded><![CDATA[A client of mine is having me write some UI over a mysql database they've created and interact with using various tools. They are great engineers, but not computer since people. I don't know which parts of their database are their own creation and which dictated by the applications that write to it.

In their database I've encountered a way of tacking dates that I've never seem before. They are keeping the time as a double like 40638.3271501182.

WTF, is what I thought. It's obviously not seconds. Mysql won't cast it as a date either. Googling didn't turn up any pages which showed different ways to use a double as date. I'm recording their usage of in case anybody else searches in the future.

What they're doing is storing the fractional number of days since January 1, 1900. I'm not sure quite how accurate this mechanism is. For completeness, here is my code in Java that transforms the fractional days to a real date object.

public static Date convertDouble(Double doub) {

// create a calendar object set to January 1, 1900
Calendar c = Calendar.getInstance();
c.set(Calendar.YEAR, 1900);
c.set(Calendar.MONTH, Calendar.JANUARY);
c.set(Calendar.DAY_OF_MONTH, 1);
c.set(Calendar.HOUR_OF_DAY, 0);
c.set(Calendar.MINUTE, 0);
c.set(Calendar.SECOND, 0);
c.set(Calendar.MILLISECOND, 0);

// add the whole days to the starting date
c.add(Calendar.DAY_OF_YEAR, (int)doub.doubleValue());

// find the number of seconds in the fractional day
double d = doub - ((int)doub.doubleValue());
d = d * 24 * 60 * 60;

// add the seconds to calculated day
c.add(Calendar.SECOND, (int)d);

return c.getTime();]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>163</wp:post_id>
  <wp:post_date>2013-09-22 17:35:47</wp:post_date>
  <wp:post_date_gmt>2013-09-22 17:35:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>double-as-date</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="calendar-object"><![CDATA[calendar object]]></category>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="convert-double-to-date"><![CDATA[convert double to date]]></category>
  <category domain="post_tag" nicename="date"><![CDATA[date]]></category>
  <category domain="post_tag" nicename="date-as-double"><![CDATA[date as double]]></category>
  <category domain="post_tag" nicename="double"><![CDATA[double]]></category>
  <category domain="post_tag" nicename="double-as-date"><![CDATA[double as date]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="technology"><![CDATA[technology]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Changing All Extentions</title>
  <link>http://codingfit.wordpress.com/2013/11/06/changing-all-extentions/</link>
  <pubDate>Wed, 06 Nov 2013 04:13:08 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=168</guid>
  <description/>
  <content:encoded><![CDATA[After testing some mirroring, I wanted to rename a bunch of the php files I'd download to have an html extension. Being that type of guy, I wanted to see if I could do it just with existing commands, files, and pipes. It was actually a lot easier than I thought it would be. The lines below will produce a bash script to do the renames:
<pre style="padding-left:30px;">find . -name '*.php' | sed 's/[.]php$/.html/g' &gt; html-list.txt
find . -name '*.php' &gt; php-list.txt
paste php-list.txt html-list.txt | sed 's/\t/ /g' \
| sed 's/^/mv /g' &gt; mv-phps.sh</pre>
Almost too easy.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>168</wp:post_id>
  <wp:post_date>2013-11-06 04:13:08</wp:post_date>
  <wp:post_date_gmt>2013-11-06 04:13:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>changing-all-extentions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="all-files"><![CDATA[all files]]></category>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="directory"><![CDATA[directory]]></category>
  <category domain="post_tag" nicename="file"><![CDATA[file]]></category>
  <category domain="post_tag" nicename="html-extension"><![CDATA[html extension]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
  <category domain="post_tag" nicename="rename"><![CDATA[rename]]></category>
  <category domain="post_tag" nicename="tree"><![CDATA[tree]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>It's Like Mixed Media</title>
  <link>http://codingfit.wordpress.com/2013/11/08/its-like-mixed-media/</link>
  <pubDate>Fri, 08 Nov 2013 17:10:06 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=172</guid>
  <description/>
  <content:encoded><![CDATA[This is really impressive:

<a href="http://www.theguardian.com/world/interactive/2013/nov/01/snowden-nsa-files-surveillance-revelations-decoded#section/1">Guardian NSA Files</a>

It's not print, although there's a lot of text. It's not TV, although there's a lot of video. It's not shameless eye-candy, although there are a lot of good graphics. It's not statistics, although it shows quite a few numbers. It's not an application, although there are interactive elements.

This is a totally different way of presenting information that is uniquely the web.

I'm not saying I'd like to read a book in this format. However, all communication is limited by the medium it uses. The accomplishment of this piece seem to be an answer to the question, "What if we tried to create something that used all of the capacities of the web and modern browsers to convey information about a single topic?"

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>172</wp:post_id>
  <wp:post_date>2013-11-08 17:10:06</wp:post_date>
  <wp:post_date_gmt>2013-11-08 17:10:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>its-like-mixed-media</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="guardian"><![CDATA[Guardian]]></category>
  <category domain="post_tag" nicename="high-production-value"><![CDATA[high production value]]></category>
  <category domain="post_tag" nicename="image"><![CDATA[image]]></category>
  <category domain="post_tag" nicename="mixed-media"><![CDATA[mixed media]]></category>
  <category domain="post_tag" nicename="nsa"><![CDATA[NSA]]></category>
  <category domain="post_tag" nicename="text"><![CDATA[text]]></category>
  <category domain="post_tag" nicename="video"><![CDATA[video]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Easy RAIDer</title>
  <link>http://codingfit.wordpress.com/2013/12/03/easy-raider/</link>
  <pubDate>Tue, 03 Dec 2013 22:53:25 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=175</guid>
  <description/>
  <content:encoded><![CDATA[RAID arrays, good for performance, good for availability. I want to use them to improve my Amazon Micro Instance horrible disk read time. These are the steps that I've taken on my Ubuntu 13.10 micro instance to attempt a cheap and high performance box.
<h2>Conclusion / Executive Summary</h2>
My summary of doing striping over two EBS disks on a micro instance with the configuration below is: it seems to be better, at least no worse, it's kind of tough to tell. My test numbers for both the root (unraided) EBS fs and the RAID fs swung widely when doing the hdparm -t &lt;device&gt; test from 19MB/s to 129/MBs. The RAID directories seemed to do consistently a little better, but just about 15% to 30% better. I'd guess the performance would be improved by adding more EBS volumes to the RAID. However, given the wild range, to get consistently better performance, I think I'll try doing some smart in memory caching.

In brief, I think this is a technique to play with and try to improve upon, and one that could make a micro instance marginally faster, but it probably won't give that big boost to the system I'm looking for.
<h2>Special Thanks</h2>
I want to give a special thanks to Erik of <a href="http://af-design.com/">AF-Design</a> and <a href="http://www.smugmug.com/">SmugMug</a> who provided the initial study (linked below) and gave me a lot of good advice about how to improve the RAID performance.
<h2>Recreation Steps</h2>
1. Create and attach 2 EBS volumes of the same size to the instance. Although it says they are sdf and sdf in the management console, don't believe that. They show up as something else like xvdf and xvdg.

2. Run:
<pre>lsblk</pre>
This will show you the actual names of the block devices.

3. Run something like (you may have to install mdadm first):
<pre>mdadm --create /dev/md0 --level=stripe --chunk=16 --raid-devices=2 /dev/xvdf /dev/xvdg</pre>
Chunk size is set to 16k, which may not be right. Apparently choosing this is somewhat of an art. Most of my reads are pretty small files though, so I believe this smaller size will improve performance for me. I chose 16k because it is the size of the blocks which EBS uses. This size should align the conceptualized of the OS with the actual view of the Amazon hardware.

Future steps would be to experiment with some larger block sizes. 16k is smaller than any size I've seen recommended for real hardware. Increasing the size should theoretically improve throughput but should also increase latency and cost as more EBS blocks are read than what file system needs.

5. Run:
<pre>mdadm --detail --scan &gt;&gt; /etc/mdadm/mdadm.conf</pre>
This saves the configuration. Without this apparently I'd get weird behavior when I rebooted.

6. Format the new device:
<pre id="ext3">mkfs.ext4 -b 4096 -E stride=4,stripe-width=8 /dev/md0</pre>
<div>Apparently, choosing file system parameters is also something of an art. The performance studies I've seen seem to show that anything less than 4k blocks perform terribly. This configuration results in 4 file system blocks being saved to one RAID/EBS block, then the next 4 file system blocks being saved to the next EBS block, which is on another EBS volume.</div>
<div></div>
<div>Although I'm not sure, this indicates to me that no performance increase can be expected for files smaller than 16k.</div>
<div></div>
<div>7. Switch the file system to be write-back. This causes fewer writes to the disk which will be important in the EC2 disk over network environment. I should add, I think all of the options I'm about to suggest for configuring a disk are probably not a good idea on physical hardware production systems because they lower the reliability of the system. However, since Amazon does a lot of reliability stuff for me and I do daily backups, I think these are all reasonably safe.</div>
<div></div>
<div><span style="font-family:Consolas, Monaco, monospace;font-size:12px;line-height:18px;">tune2fs -O has_journal -o journal_data_writeback /dev/md0</span></div>
<div></div>
<div>8. Start directory indexing which should improve lookup times.</div>
<div></div>
<pre>tune2fs -O dir_index /dev/md0</pre>
<div></div>
<div>9. Have the directories retroactively indexed.</div>
<div></div>
<pre>e2fsck -D /dev/md0</pre>
<div></div>
<div>10. Configure /etc/fstab so that the mounted file system uses good performing options. This will make the system a little less resilient to crashes but should be much faster. Add the following line to the fstab file</div>
<div></div>
<pre>/dev/md0 /mnt/data ext4 noatime,nodiratime,data=writeback,stripe=8,errors=remount-ro 0 2</pre>
<div></div>
<div><span style="line-height:1.5em;">7. Mount that puppy.</span></div>
<div></div>
<pre>mkdir /mnt/data
mount /mnt/data</pre>
<div></div>
<div>One way to test performance is with</div>
<div></div>
<pre>hdparm -Tt /dev/md0</pre>
<div></div>
<div>Another way is to use bonnie (available in apt-get as bonnie++). Run like</div>
<div></div>
<pre>bonnie -d /mnt/data</pre>
<div></div>
There are some great references out there, as well as some pretty out of date ones. If any of them talk about "raidtools" as the program to do the configuration, that is a very old page.

A nice guide, more thorough that what I have here (beware of the typos in the stride calculation):

<a href="http://erikugel.wordpress.com/2011/04/14/the-quest-for-the-fastest-linux-filesystem/">http://erikugel.wordpress.com/2011/04/14/the-quest-for-the-fastest-linux-filesystem/</a>

A tool for calculating the file system format parameters:

<a href="http://uclibc.org/~aldot/mkfs_stride.html">http://uclibc.org/~aldot/mkfs_stride.html</a>

An awesome study showing real numbers of how a RAID array in EC2 performs from the Erik thanked in the opening:

<a href="http://af-design.com/blog/2009/02/27/amazon-ec2-disk-performance/">http://af-design.com/blog/2009/02/27/amazon-ec2-disk-performance/</a>

A pretty complete wiki for doing linux RAID (a couple sections seem out of date):

<a href="https://raid.wiki.kernel.org/index.php/RAID_setup">https://raid.wiki.kernel.org/index.php/RAID_setup</a>
<h2>My Bonnie Test Numbers</h2>
<pre>RAID (/mnt/data)

Version  1.97       ------Sequential Output------ --Sequential Input- --Random-
Concurrency   1     -Per Chr- --Block-- -Rewrite- -Per Chr- --Block-- --Seeks--
Machine        Size K/sec %CP K/sec %CP K/sec %CP K/sec %CP K/sec %CP  /sec %CP
ip-10-64-42-7 1176M   280  98 23953   4 26864   7   883  99 145133  23  7052 116
Latency               293ms    1399ms     318ms   12885us   37519us    5304us
Version  1.97       ------Sequential Create------ --------Random Create--------
ip-10-64-42-76      -Create-- --Read--- -Delete-- -Create-- --Read--- -Delete--
              files  /sec %CP  /sec %CP  /sec %CP  /sec %CP  /sec %CP  /sec %CP
                 16 26243  52 +++++ +++ 32019  47 26991  52 +++++ +++ 32564  48
Latency               376us   22084us     663us     341us      54us     256us
1.97,1.97,ip-10-64-42-76,1,1386102789,1176M,,280,98,23953,4,26864,7,883,99,145133,23,7052,116,16,,,,,26243,52,+++++,+++,32019,47,26991,52,+++++,+++,32564,48,293ms,1399ms,318ms,12885us,37519us,5304us,376us,22084us,663us,341us,54us,256us

ROOT EBS (/tmp/bonnie)

Version  1.97       ------Sequential Output------ --Sequential Input- --Random-
Concurrency   1     -Per Chr- --Block-- -Rewrite- -Per Chr- --Block-- --Seeks--
Machine        Size K/sec %CP K/sec %CP K/sec %CP K/sec %CP K/sec %CP  /sec %CP
ip-10-64-42-7 1176M   301  98 25869   6 22830   5   846  99 129950  13  4669  59
Latency               165ms     768ms     706ms   30134us    8365us    5942us
Version  1.97       ------Sequential Create------ --------Random Create--------
ip-10-64-42-76      -Create-- --Read--- -Delete-- -Create-- --Read--- -Delete--
              files  /sec %CP  /sec %CP  /sec %CP  /sec %CP  /sec %CP  /sec %CP
                 16 24041  47 +++++ +++ 29300  47 25952  50 +++++ +++ 29940  45
Latency              9150us     534us   19469us     556us     191us     566us
1.97,1.97,ip-10-64-42-76,1,1386103153,1176M,,301,98,25869,6,22830,5,846,99,129950,13,4669,59,16,,,,,24041,47,+++++,+++,29300,47,25952,50,+++++,+++,29940,45,165ms,768ms,706ms,30134us,8365us,5942us,9150us,534us,19469us,556us,191us,566us</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>175</wp:post_id>
  <wp:post_date>2013-12-03 22:53:25</wp:post_date>
  <wp:post_date_gmt>2013-12-03 22:53:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>easy-raider</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="amazon"><![CDATA[amazon]]></category>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="disk"><![CDATA[disk]]></category>
  <category domain="post_tag" nicename="ebs"><![CDATA[ebs]]></category>
  <category domain="post_tag" nicename="ec2"><![CDATA[ec2]]></category>
  <category domain="post_tag" nicename="file-system"><![CDATA[file system]]></category>
  <category domain="post_tag" nicename="micro"><![CDATA[micro]]></category>
  <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
  <category domain="post_tag" nicename="raid"><![CDATA[raid]]></category>
  <category domain="category" nicename="system-admin"><![CDATA[system admin]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Amazon EC2 Instance Network Performance</title>
  <link>http://codingfit.wordpress.com/2013/12/05/amazon-ec2-instance-network-performance/</link>
  <pubDate>Thu, 05 Dec 2013 04:25:31 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=179</guid>
  <description/>
  <content:encoded><![CDATA[So cheap, I want to love them, the Amazon EC2 micro instance. My previous attempt at getting performance from a micro instance via RAID did not work out as I wanted. I decided to do some performance testing on different instance sizes, from both the local server and remote from my desktop.
<h2>Thesis</h2>
My thesis in this experiment was that the raw performance of the micro box was horrible and by increasing the capacity of the box to a small, medium, or xlarge I would improve the performance.
<h2>Caveat</h2>
Amazon instances are notoriously inconsistent in their performance. In my previous post about EBS (Elastic Block Store) access time, the throughput (determined a lot by network speed) varied by an order of magnitude within the period of a minute. Although I ran the these tests several times, I may have gotten different results had I tried 5 minutes later or gotten my instance to start on a physical machine with less resource hungry neighbors.
<h2>Conclusion</h2>
Shockingly, the t1.micro instance is really pretty good. What I thought was bad performance by the server was just typical of my Internet connection for all sites.

The size of the instance had surprisingly little to do with request latency. I wanted basic responses to get below 20ms, but now that dream is dead to me. Apparently, my connection to the internet just requires that a request will take me more than 50ms.

However, instance size had a lot to do with the server's ability to scale to handle many connections.

One of the most import lessons was that a micro instance actually does a pretty good job if you can live within the memory constraints (615MB).

Also, an m1.small is terrible, despite being more expensive than a micro. It failed to return the results to a remote client when queried using 100 concurrent connections. It's time for 100 connections from localhost was 3 times longer than the next server (m1.medium).
<h2>Test methodology</h2>
I'm using Apache Bench to generate traffic. Apparently there are several technical problems with it in that it is not itself multithreaded and generates what looks more like HTTP 1.0 traffic instead of using keep-alive for connections and other techniques that are more typical of real clients. I didn't let this bother me as it was easy to use and available as a package. Also I'm interested in a worst case set of requests, so it sounded fine.

I tested a mix of servers, all running Ubuntu, OpenJDK7, and Tomcat7. I took the stock configuration on all of these. In fact, I used the same volume for all of the Amazon server tests. To serve the content, I used my <a href="https://github.com/EmergentIdeas/webhandle">webhandle</a> framework, which was not configured to do anything smart like cache frequently used files in memory. For these tests, it read one small page from disk and wrote it to the response object. This gave me a realistic test for static content although I admit a different framework or a different configuration optimized for static content might have delivered faster pages.

The Apache Bench commands were issued either from my workstation or from the server being tested to itself (localhost read). Some documents I've read say that running both on the same box can show misleading results, slower than they otherwise would be, because both client and server are contesting for resources on the same box. The commands issued were:
<pre>ab -t 3 &lt;url&gt;
ab -c 10 -t 3 &lt;url&gt;
ab -c 100 -t 10 &lt;url&gt;
ab -c 1000 -t 10 &lt;url&gt;</pre>
Not all of these commands were run on all configurations and some of them did not work even when run. Specifically, Apache Bench seems to have a bug/feature that causes it not to report results when it can't correctly poll the connections it has open. This happened for me when the server was under heavy load, so I'm assuming I'd found the limit of measurement with this testing rig.

The servers themselves look like:
<table border="0" cellspacing="0">
<tbody>
<tr>
<td align="LEFT" height="17">Servers</td>
<td align="LEFT">OS</td>
<td align="LEFT">vCPU</td>
<td align="LEFT">Memory (GB)</td>
<td align="LEFT">NIC Speed</td>
</tr>
<tr>
<td align="LEFT" height="16">t1.micro</td>
<td align="LEFT">Ubuntu Server 13.10</td>
<td align="RIGHT">1</td>
<td align="RIGHT">0.615</td>
<td align="LEFT">Very Low</td>
</tr>
<tr>
<td align="LEFT" height="16">m1.small</td>
<td align="LEFT">Ubuntu Server 13.10</td>
<td align="RIGHT">1</td>
<td align="RIGHT">1.7</td>
<td align="LEFT">Low</td>
</tr>
<tr>
<td align="LEFT" height="16">m1.medium</td>
<td align="LEFT">Ubuntu Server 13.10</td>
<td align="RIGHT">1</td>
<td align="RIGHT">3.75</td>
<td align="LEFT">Moderate</td>
</tr>
<tr>
<td align="LEFT" height="17">m1.xlarge</td>
<td align="LEFT">Ubuntu Server 13.10</td>
<td align="RIGHT">4</td>
<td align="RIGHT">15</td>
<td align="LEFT">High</td>
</tr>
<tr>
<td align="LEFT" height="16">Workstation</td>
<td align="LEFT">Ubuntu Desktop 13.04</td>
<td align="RIGHT">8</td>
<td align="RIGHT">16</td>
<td align="LEFT"></td>
</tr>
</tbody>
</table>
This is pretty standard stuff from the Amazon website. Keep in mind, although some servers had lots of memory, I didn't config my Tomcat start to use it, so there may be room to better use basic resources.
<h2>Remote Client Performance</h2>
<h3>In which I learn that my cable modem is the limiting factor</h3>
<a href="http://codingfit.files.wordpress.com/2013/12/meantimeremote.jpg"><img class="alignnone  wp-image-187" alt="MeanTimeRemote" src="http://codingfit.files.wordpress.com/2013/12/meantimeremote.jpg?w=300" width="100%" /></a>

<a href="http://codingfit.files.wordpress.com/2013/12/requestsremote.jpg"><img class="alignnone  wp-image-189" alt="RequestsRemote" src="http://codingfit.files.wordpress.com/2013/12/requestsremote.jpg?w=300" width="100%" /></a>

It seems to me, based on the compression in these results, that my Internet connection is limiting both how fast I can receive pages and how many I can receive per second. You may note both google.com and ibm.com in the results which return only redirect pages, equivalent in size to my test page. Also, you may notice only a single data point for Google. I was too cowardly to do anything which might make them blacklist me as an attacker. Response time from my workstation is included in the first graph to give you a feel for what the time taken by the framework under load on a good system with no network overhead is.

A special thing to note here is the single point for the m1.small instance which failed under 100 concurrent connects and even under 10 connections had significantly less throughput than the other servers.
<h2>Local Performance</h2>
<h3>In which I learn to stop worrying and love the micro performance</h3>
<a href="http://codingfit.files.wordpress.com/2013/12/meantimelocal.jpg"><img class="alignnone  wp-image-186" alt="MeanTimeLocal" src="http://codingfit.files.wordpress.com/2013/12/meantimelocal.jpg?w=300" width="100%" /></a>

<a href="http://codingfit.files.wordpress.com/2013/12/requestslocal1.jpg"><img class="alignnone  wp-image-195" alt="RequestsLocal" src="http://codingfit.files.wordpress.com/2013/12/requestslocal1.jpg?w=300" width="100%" /></a>

Here we can see that for a single thread the performance of all these boxes is about the same. Each request takes 2-3 milliseconds. Each server has a maximum capacity roughly like:

requests-per-second = (1000(ms) / (3ms)) * num-of-cores

The boxes with more CPUs/Cores have substantially better capacity but really no better response time given my observation that this load seems to be limited by the number of active threads. There are some effects as the number of connections goes way beyond the number of cores. Both high performance platforms show degradation as the number of requests far exceeds the number of thread available. This is to be expected, but I'm guessing good configuration and a steady load could reduce the effect.

One huge thing to note is the horrible performance of the m1.small and the surprisingly good performance of the t1.micro, which in this test performs better than the m1.medium. Amazon does advertise the micro as having "burst" capability of an extra compute unit and a variable disk performance which could theoretically be greater than the medium. On the other hand, I've heard that micro instances get throttled down if they draw too high a usage for too long.
<h2>Sources of Error (as yet unmentioned)</h2>
This test is somewhat ideal in that I'm requesting the same file over and over again, meaning that it should be in the disk cache. If a variety of files were being requested, and the EBS volume was constantly being queried, these instances might show different performance characteristics.
<h2>Final Conclusions</h2>
All of these servers (except the small) show good performance under 10 concurrent requests and reasonable response at 100.

The t1.micro instance is surprisingly good. It shows the ability to saturate my Internet connection without problem. Extrapolating from it's local and remote performance, it shows that it could serve between 25 and 100 page views per second (let's say 5 requests per page view, which is about right when you set the expiration headers leading to browser caching and use of CDNs for third party stuff like jQuery). Given a scenario in which a viewer is making 40 page views per browsing day (let's say 8 hours and that demand is evenly distributed), that's support for 18,000 viewers (25 * 60 * 60 * 8 / 40).

This is (with the above assumptions about caching and perhaps judicious use of CDNs for third party tools) 1,500 pages per minute, which is pretty good. Doing some reading, getting slashdotted will generate between 5k and 100k page loads. I'm not sure I'd want to bet money that my micro instance would survive it, but it seems possible and reasonable.

These numbers are, of course, for static content with no need for database content. That's entirely unrealistic in one way, since almost any real application is going to use some database and will cause different pieces of static content to be served. In another way though, it is entirely realistic in that any web app built to scale will make heavy use of pre-generated and cached content, essentially attempting to make all content static, just static content that changes frequently.

Okay, so clearly small sites are probably covered if well designed. How about large sites. I read one citation saying that the Huffington Post has 15.6 million page views per weekday (yikes!). Of course the Huffing Post page actually requires about 300 requests from a variety of sources, so probably it uses something more robust than 1300 micro instances (still only $19.5k /month) behind round-robin-ed load balancers.

So...

It turns out the micro instance is actually a pretty good deal. It has my love and Amazon my money.
<h2>Raw Data</h2>
Serial indicates no more than one connection to the server at a time.

95% total indicates how long it took a request in the 95th percentile to come back. Or, said differently, 95% of the requests came back in that time or less. This hides some pretty bad outliers under heavy load but I think it gives an accurate representation of the worst that most users would experience.
<table border="0" cellspacing="0">
<tbody>
<tr>
<td align="LEFT" height="16">Configuration</td>
<td align="LEFT">Measurement</td>
<td align="LEFT"></td>
<td align="LEFT"></td>
<td align="LEFT"></td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16"></td>
<td align="LEFT"></td>
<td align="LEFT">serial</td>
<td align="LEFT">10 concurrent</td>
<td align="LEFT">100 concurrent</td>
<td align="LEFT">1000 concurrent</td>
</tr>
<tr>
<td align="LEFT" height="16">Micro Local</td>
<td align="LEFT">mean total</td>
<td align="LEFT"></td>
<td align="RIGHT">22</td>
<td align="RIGHT">198</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Micro Local</td>
<td align="LEFT">95% total</td>
<td align="LEFT"></td>
<td align="RIGHT">55</td>
<td align="RIGHT">346</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Micro Local</td>
<td align="LEFT">Requests / s</td>
<td align="LEFT"></td>
<td align="RIGHT">450.59</td>
<td align="RIGHT">497.36</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Micro Remote</td>
<td align="LEFT">mean total</td>
<td align="LEFT"></td>
<td align="RIGHT">135</td>
<td align="RIGHT">662</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Micro Remote</td>
<td align="LEFT">95% total</td>
<td align="LEFT"></td>
<td align="RIGHT">166</td>
<td align="RIGHT">701</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Micro Remote</td>
<td align="LEFT">Requests / s</td>
<td align="LEFT"></td>
<td align="RIGHT">71.96</td>
<td align="RIGHT">129.09</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Small Local</td>
<td align="LEFT">mean total</td>
<td align="LEFT"></td>
<td align="RIGHT">85</td>
<td align="RIGHT">772</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Small Local</td>
<td align="LEFT">95% total</td>
<td align="LEFT"></td>
<td align="RIGHT">296</td>
<td align="RIGHT">1448</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Small Local</td>
<td align="LEFT">Requests / s</td>
<td align="LEFT"></td>
<td align="RIGHT">108.41</td>
<td align="RIGHT">119.54</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Small Remote</td>
<td align="LEFT">mean total</td>
<td align="LEFT"></td>
<td align="RIGHT">162</td>
<td align="LEFT"></td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Small Remote</td>
<td align="LEFT">95% total</td>
<td align="LEFT"></td>
<td align="RIGHT">196</td>
<td align="LEFT"></td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Small Remote</td>
<td align="LEFT">Requests / s</td>
<td align="LEFT"></td>
<td align="RIGHT">25.25</td>
<td align="LEFT"></td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Med Local</td>
<td align="LEFT">mean total</td>
<td align="LEFT"></td>
<td align="RIGHT">51</td>
<td align="RIGHT">265</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Med Local</td>
<td align="LEFT">95% total</td>
<td align="LEFT"></td>
<td align="RIGHT">118</td>
<td align="RIGHT">433</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Med Local</td>
<td align="LEFT">Requests / s</td>
<td align="LEFT"></td>
<td align="RIGHT">195.28</td>
<td align="RIGHT">368.47</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Med Remote</td>
<td align="LEFT">mean total</td>
<td align="LEFT"></td>
<td align="RIGHT">110</td>
<td align="RIGHT">627</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Med Remote</td>
<td align="LEFT">95% total</td>
<td align="LEFT"></td>
<td align="RIGHT">125</td>
<td align="RIGHT">716</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Med Remote</td>
<td align="LEFT">Requests / s</td>
<td align="LEFT"></td>
<td align="RIGHT">89.79</td>
<td align="RIGHT">150.65</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="17">Xlarge Local</td>
<td align="LEFT">mean total</td>
<td align="RIGHT">2</td>
<td align="RIGHT">6</td>
<td align="RIGHT">34</td>
<td align="RIGHT">551</td>
</tr>
<tr>
<td align="LEFT" height="17">Xlarge Local</td>
<td align="LEFT">95% total</td>
<td align="RIGHT">4</td>
<td align="RIGHT">17</td>
<td align="RIGHT">96</td>
<td align="RIGHT">3394</td>
</tr>
<tr>
<td align="LEFT" height="17">Xlarge Local</td>
<td align="LEFT">Requests / s</td>
<td align="RIGHT">431.64</td>
<td align="RIGHT">1725</td>
<td align="RIGHT">2953.82</td>
<td align="RIGHT">993.32</td>
</tr>
<tr>
<td align="LEFT" height="17">Xlarge Remote</td>
<td align="LEFT">mean total</td>
<td align="RIGHT">119</td>
<td align="RIGHT">142</td>
<td align="RIGHT">745</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="17">Xlarge Remote</td>
<td align="LEFT">95% total</td>
<td align="RIGHT">135</td>
<td align="RIGHT">149</td>
<td align="RIGHT">1549</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="17">Xlarge Remote</td>
<td align="LEFT">Requests / s</td>
<td align="RIGHT">8.24</td>
<td align="RIGHT">68.8</td>
<td align="RIGHT">126.82</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Workstation</td>
<td align="LEFT">mean total</td>
<td align="RIGHT">2</td>
<td align="RIGHT">2</td>
<td align="RIGHT">73</td>
<td align="RIGHT">238</td>
</tr>
<tr>
<td align="LEFT" height="16">Workstation</td>
<td align="LEFT">95% total</td>
<td align="RIGHT">4</td>
<td align="RIGHT">4</td>
<td align="RIGHT">624</td>
<td align="RIGHT">1030</td>
</tr>
<tr>
<td align="LEFT" height="16">Workstation</td>
<td align="LEFT">Requests / s</td>
<td align="RIGHT">465.25</td>
<td align="RIGHT">2425.72</td>
<td align="RIGHT">1343.88</td>
<td align="RIGHT">1847.79</td>
</tr>
<tr>
<td align="LEFT" height="16">IBM Remote</td>
<td align="LEFT">mean total</td>
<td align="RIGHT">105</td>
<td align="RIGHT">108</td>
<td align="RIGHT">725</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">IBM Remote</td>
<td align="LEFT">95% total</td>
<td align="RIGHT">115</td>
<td align="RIGHT">119</td>
<td align="RIGHT">584</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">IBM Remote</td>
<td align="LEFT">Requests / s</td>
<td align="RIGHT">9.53</td>
<td align="RIGHT">90.03</td>
<td align="RIGHT">164.75</td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Google Remote</td>
<td align="LEFT">mean total</td>
<td align="RIGHT">184</td>
<td align="LEFT"></td>
<td align="LEFT"></td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Google Remote</td>
<td align="LEFT">95% total</td>
<td align="RIGHT">200</td>
<td align="LEFT"></td>
<td align="LEFT"></td>
<td align="LEFT"></td>
</tr>
<tr>
<td align="LEFT" height="16">Google Remote</td>
<td align="LEFT">Requests / s</td>
<td align="RIGHT">5.29</td>
<td align="LEFT"></td>
<td align="LEFT"></td>
<td align="LEFT"></td>
</tr>
</tbody>
</table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>179</wp:post_id>
  <wp:post_date>2013-12-05 04:25:31</wp:post_date>
  <wp:post_date_gmt>2013-12-05 04:25:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>amazon-ec2-instance-network-performance</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="amazon"><![CDATA[amazon]]></category>
  <category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
  <category domain="category" nicename="coding"><![CDATA[coding]]></category>
  <category domain="post_tag" nicename="ec2"><![CDATA[ec2]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
  <category domain="post_tag" nicename="medium"><![CDATA[medium]]></category>
  <category domain="post_tag" nicename="micro"><![CDATA[micro]]></category>
  <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
  <category domain="post_tag" nicename="small"><![CDATA[small]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="category" nicename="system-admin"><![CDATA[system admin]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <category domain="post_tag" nicename="tomcat"><![CDATA[tomcat]]></category>
  <category domain="post_tag" nicename="web-software"><![CDATA[web software]]></category>
  <category domain="post_tag" nicename="xlarge"><![CDATA[xlarge]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>24</wp:comment_id>
    <wp:comment_author><![CDATA[SutoCom]]></wp:comment_author>
    <wp:comment_author_email>dennes777@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.sutocom.net</wp:comment_author_url>
    <wp:comment_author_IP>50.176.179.47</wp:comment_author_IP>
    <wp:comment_date>2013-12-07 17:30:32</wp:comment_date>
    <wp:comment_date_gmt>2013-12-07 17:30:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogged this on <a href="http://sutocom.net/2013/12/07/amazon-ec2-instance-network-performance/" rel="nofollow">Sutoprise Avenue, A SutoCom Source</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>9083961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1386437432</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1386437433.337090969085693359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"sutocom";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1386437433</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>MeanTimeLocal</title>
  <link>http://codingfit.wordpress.com/2013/12/05/amazon-ec2-instance-network-performance/meantimelocal/</link>
  <pubDate>Wed, 04 Dec 2013 23:41:10 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.files.wordpress.com/2013/12/meantimelocal.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>186</wp:post_id>
  <wp:post_date>2013-12-04 23:41:10</wp:post_date>
  <wp:post_date_gmt>2013-12-04 23:41:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>meantimelocal</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://codingfit.files.wordpress.com/2013/12/meantimelocal.jpg</wp:attachment_url>
</item>
<item>
  <title>MeanTimeRemote</title>
  <link>http://codingfit.wordpress.com/2013/12/05/amazon-ec2-instance-network-performance/meantimeremote/</link>
  <pubDate>Wed, 04 Dec 2013 23:41:11 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.files.wordpress.com/2013/12/meantimeremote.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>187</wp:post_id>
  <wp:post_date>2013-12-04 23:41:11</wp:post_date>
  <wp:post_date_gmt>2013-12-04 23:41:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>meantimeremote</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://codingfit.files.wordpress.com/2013/12/meantimeremote.jpg</wp:attachment_url>
</item>
<item>
  <title>RequestsRemote</title>
  <link>http://codingfit.wordpress.com/2013/12/05/amazon-ec2-instance-network-performance/requestsremote/</link>
  <pubDate>Wed, 04 Dec 2013 23:41:13 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.files.wordpress.com/2013/12/requestsremote.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>189</wp:post_id>
  <wp:post_date>2013-12-04 23:41:13</wp:post_date>
  <wp:post_date_gmt>2013-12-04 23:41:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>requestsremote</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://codingfit.files.wordpress.com/2013/12/requestsremote.jpg</wp:attachment_url>
</item>
<item>
  <title>RequestsLocal</title>
  <link>http://codingfit.wordpress.com/2013/12/05/amazon-ec2-instance-network-performance/requestslocal-2/</link>
  <pubDate>Thu, 05 Dec 2013 03:35:47 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.files.wordpress.com/2013/12/requestslocal1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>195</wp:post_id>
  <wp:post_date>2013-12-05 03:35:47</wp:post_date>
  <wp:post_date_gmt>2013-12-05 03:35:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>requestslocal-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://codingfit.files.wordpress.com/2013/12/requestslocal1.jpg</wp:attachment_url>
</item>
<item>
  <title>Speed Varnish</title>
  <link>http://codingfit.wordpress.com/?p=202</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>dankolz</dc:creator>
  <guid isPermaLink="false">http://codingfit.wordpress.com/?p=202</guid>
  <description/>
  <content:encoded><![CDATA[&nbsp;

apt-get install varnish

Set varnish to listen on port 80

edit /etc/default/varnish so that

-a: 6081

reads

-a: 80

&nbsp;

By default, varnish won't cache anything with a cookie. This is for great reasons but is annoying as hell since I use a Java server which always writes cookies. To get varnish to cache them anyway, keeping in mind this is dangerous if these are dynamically generated, add the following to the /etc/varnish/defaults.vcl
<pre>sub vcl_recv {
 if (req.url ~ "\.(png|gif|jpg|swf|css|js)$") {
    return(lookup);
 }
}

# strip the cookie before the image is inserted into cache.
sub vcl_fetch {
 if (req.url ~ "\.(png|gif|jpg|swf|css|js)$") {
   unset beresp.http.set-cookie;
 }
}</pre>
<a href="https://www.varnish-cache.org/trac/wiki/VCLExampleCacheCookies">https://www.varnish-cache.org/trac/wiki/VCLExampleCacheCookies</a>

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>202</wp:post_id>
  <wp:post_date>2013-12-08 05:03:48</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
  </channel>
</rss>
